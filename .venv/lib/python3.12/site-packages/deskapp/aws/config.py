from __future__ import annotations
import os
from pathlib import Path
from typing import Any, Dict, Optional

try:
    import tomllib  # Python >= 3.11
except ModuleNotFoundError:  # pragma: no cover
    import tomli as tomllib  # type: ignore


CONFIG_ENV = "DESKAPP_AWS_CONFIG_PATH"
DEFAULT_RELATIVE = Path(".config/deskapp/aws/config.toml")


def _xdg_config_home() -> Path:
    xdg = os.environ.get("XDG_CONFIG_HOME")
    if xdg:
        return Path(xdg)
    return Path.home() / ".config"


def find_config_path() -> Optional[Path]:
    # 1) Explicit env var
    env_path = os.environ.get(CONFIG_ENV)
    if env_path:
        p = Path(env_path).expanduser()
        if p.exists():
            return p
    # 2) XDG config default location
    xdg_path = _xdg_config_home() / "deskapp/aws/config.toml"
    if xdg_path.exists():
        return xdg_path
    # 3) Project-local fallback (useful for dev)
    repo_local = Path(__file__).resolve().parent / "config.toml"
    if repo_local.exists():
        return repo_local
    return None


def load_config() -> Dict[str, Any]:
    path = find_config_path()
    data: Dict[str, Any] = {}
    if path and path.exists():
        with open(path, "rb") as f:
            data = tomllib.load(f)
    # Normalize keys with sensible defaults
    profile = data.get("profile_name")
    region = data.get("region_name", os.environ.get("AWS_REGION") or os.environ.get("AWS_DEFAULT_REGION"))
    instance_id = data.get("instance_id")

    # Optional direct credentials (avoid if possible)
    access_key_id = data.get("access_key_id")
    secret_access_key = data.get("secret_access_key")
    session_token = data.get("session_token")

    return {
        "profile_name": profile,
        "region_name": region,
        "instance_id": instance_id,
        "access_key_id": access_key_id,
        "secret_access_key": secret_access_key,
        "session_token": session_token,
        "config_path": str(path) if path else None,
    }

